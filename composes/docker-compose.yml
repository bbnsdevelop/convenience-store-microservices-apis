version: '3'
services: 
  mongo:
    image: mongo
    container_name: mongoDB
    restart: always
    ports:
      - 27017:27017
    networks:
      - mongo-compose-network
    command: [--auth]
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: 123asd
    volumes:
      - ~/media/b2/file_storage/volumes-docker/mongodb:/data/db

  mongo-express:
    image: mongo-express
    container_name: mongoExpress
    restart: always
    ports:
      - 8099:8081
    networks:
      - mongo-compose-network
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123asd      
      ME_CONFIG_MONGODB_AUTH_USERNAME: admin
      ME_CONFIG_MONGODB_AUTH_PASSWORD: 123asd
      ME_CONFIG_BASICAUTH_USERNAME: dev
      ME_CONFIG_BASICAUTH_PASSWORD: dev      
    depends_on:
      - mongo
  
  mysql_8:
    image: mysql
    container_name: mysql-8
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: '123asd'
      # Password for root access
      MYSQL_ROOT_PASSWORD: '123asd'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3307:3306'
    expose:
      # Opens port 3306 on the container
      - '3307'
      # Where our data will be persisted
    volumes:
      - ~/media/b2/file_storage/volumes-docker/mysql-8:/var/lib/mysql

  elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
      container_name: elasticsearch_8
      restart: always
      environment:
          - bootstrap.memory_lock=true
          - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
          - "discovery.type=single-node"
          - xpack.security.enabled=false
      ports:
          - "9200:9200"
      volumes:
          - elasticsearch_data:/usr/share/elasticsearch/data
      networks:
          - elastic
  
  kibana:
      image: docker.elastic.co/kibana/kibana:8.3.3
      container_name: kibana_8
      restart: always
      ports:
          - "5601:5601"
      environment:
          ELASTICSEARCH_URL: http://elasticsearch:9200
          ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      depends_on:
          - elasticsearch
      networks:
          - elastic

  logstash:
      image: docker.elastic.co/logstash/logstash:8.3.3
      container_name: logstash_8
      restart: always
      volumes:
        - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
        - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      ports:
        - "5044:5044"
        - "5000:5000/tcp"
        - "5000:5000/udp"
        - "9600:9600"
      environment:
        LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      networks:
        - elastic
      depends_on:
        - elasticsearch

## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    restart: always
    image: mysql:5.7
    volumes:
      - ~/media/b2/file_storage/volumes-docker/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: mykeycloak
    restart: always
    image: quay.io/keycloak/keycloak:18.0.0
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ~/media/b2/file_storage/volumes-docker/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

# Names our volume
volumes:
  elasticsearch_data:
        driver: local

networks: 
    mongo-compose-network:
      driver: bridge
    elastic:
      driver: bridge